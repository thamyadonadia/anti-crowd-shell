int backgroundGroupProcess(char* input)
    int len = strlen(input);
    int k=0, inicio=0, processCount=0;
    pid_t leader, processGroupID, sessionID; 

    for(int i=0; i<= len; i++){
        if(((i != len-1) && (input[i] == '<' && input[i+1] == '3')) || input[i] == '\0'){
            if(input[i-1]==' ' || input[i]=='\0'){
                char* process = malloc(sizeof(char) * 100);
            
                for(int j=inicio; j<i; j++){
                    process[k] = input[j];
                    k++;
                }

                char* filename = strtok(process, " "); char* args[3]; int l=0;
                args[l] = strtok(NULL, " ");
                while(args[l] && l<2){
                    l++;
                    args[l] = strtok(NULL, " "); 
                }

                if(processCount==0){ // primeiro processo lido
                    printf("PRIMEIRO PROCESSO - LIDER\n");
                    leader = fork();

                    if(leader==0){ // no filho
                        sessionID = setsid();
                        processGroupID = getpgrp();
                        execvp(filename, args);

                        fork(); // filhos x vezes 
                    } else waitpid(leader, NULL, WNOHANG);

                }else{
                    pid_t pid = fork();

                    if(pid==0){ // no filho
                        setpgid(pid, processGroupID);
                        execvp(filename, args);
                    } else waitpid(pid, NULL, WNOHANG);
                }

                inicio = i+3; k=0; processCount++;
                free(process);
            }  
        }
    }   